
project_Dot_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000e98  00000f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800086  00800086  00000f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d08  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000edc  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000566  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001132  00000000  00000000  00004cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_1>
   8:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 04 	call	0x914	; 0x914 <main>
  8a:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__system_time>
  9c:	70 91 b3 00 	lds	r23, 0x00B3	; 0x8000b3 <__system_time+0x1>
  a0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__system_time+0x2>
  a4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
  b8:	67 2b       	or	r22, r23
  ba:	09 f0       	breq	.+2      	; 0xbe <pinChange+0x6>
  bc:	9f c0       	rjmp	.+318    	; 0x1fc <pinChange+0x144>
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	11 f4       	brne	.+4      	; 0xc6 <pinChange+0xe>
  c2:	d8 98       	cbi	0x1b, 0	; 27
  c4:	08 95       	ret
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <pinChange+0x18>
  cc:	d9 98       	cbi	0x1b, 1	; 27
  ce:	08 95       	ret
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	91 05       	cpc	r25, r1
  d4:	11 f4       	brne	.+4      	; 0xda <pinChange+0x22>
  d6:	da 98       	cbi	0x1b, 2	; 27
  d8:	08 95       	ret
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	91 05       	cpc	r25, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <pinChange+0x2c>
  e0:	db 98       	cbi	0x1b, 3	; 27
  e2:	08 95       	ret
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	91 05       	cpc	r25, r1
  e8:	11 f4       	brne	.+4      	; 0xee <pinChange+0x36>
  ea:	dc 98       	cbi	0x1b, 4	; 27
  ec:	08 95       	ret
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	91 05       	cpc	r25, r1
  f2:	11 f4       	brne	.+4      	; 0xf8 <pinChange+0x40>
  f4:	dd 98       	cbi	0x1b, 5	; 27
  f6:	08 95       	ret
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	91 05       	cpc	r25, r1
  fc:	11 f4       	brne	.+4      	; 0x102 <pinChange+0x4a>
  fe:	de 98       	cbi	0x1b, 6	; 27
 100:	08 95       	ret
 102:	87 30       	cpi	r24, 0x07	; 7
 104:	91 05       	cpc	r25, r1
 106:	11 f4       	brne	.+4      	; 0x10c <pinChange+0x54>
 108:	df 98       	cbi	0x1b, 7	; 27
 10a:	08 95       	ret
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	11 f4       	brne	.+4      	; 0x116 <pinChange+0x5e>
 112:	c0 98       	cbi	0x18, 0	; 24
 114:	08 95       	ret
 116:	8b 30       	cpi	r24, 0x0B	; 11
 118:	91 05       	cpc	r25, r1
 11a:	11 f4       	brne	.+4      	; 0x120 <pinChange+0x68>
 11c:	c1 98       	cbi	0x18, 1	; 24
 11e:	08 95       	ret
 120:	8c 30       	cpi	r24, 0x0C	; 12
 122:	91 05       	cpc	r25, r1
 124:	11 f4       	brne	.+4      	; 0x12a <pinChange+0x72>
 126:	c2 98       	cbi	0x18, 2	; 24
 128:	08 95       	ret
 12a:	8d 30       	cpi	r24, 0x0D	; 13
 12c:	91 05       	cpc	r25, r1
 12e:	11 f4       	brne	.+4      	; 0x134 <pinChange+0x7c>
 130:	c3 98       	cbi	0x18, 3	; 24
 132:	08 95       	ret
 134:	8e 30       	cpi	r24, 0x0E	; 14
 136:	91 05       	cpc	r25, r1
 138:	11 f4       	brne	.+4      	; 0x13e <pinChange+0x86>
 13a:	c4 98       	cbi	0x18, 4	; 24
 13c:	08 95       	ret
 13e:	8f 30       	cpi	r24, 0x0F	; 15
 140:	91 05       	cpc	r25, r1
 142:	11 f4       	brne	.+4      	; 0x148 <pinChange+0x90>
 144:	c5 98       	cbi	0x18, 5	; 24
 146:	08 95       	ret
 148:	80 31       	cpi	r24, 0x10	; 16
 14a:	91 05       	cpc	r25, r1
 14c:	11 f4       	brne	.+4      	; 0x152 <pinChange+0x9a>
 14e:	c6 98       	cbi	0x18, 6	; 24
 150:	08 95       	ret
 152:	81 31       	cpi	r24, 0x11	; 17
 154:	91 05       	cpc	r25, r1
 156:	11 f4       	brne	.+4      	; 0x15c <pinChange+0xa4>
 158:	c7 98       	cbi	0x18, 7	; 24
 15a:	08 95       	ret
 15c:	84 31       	cpi	r24, 0x14	; 20
 15e:	91 05       	cpc	r25, r1
 160:	11 f4       	brne	.+4      	; 0x166 <pinChange+0xae>
 162:	a8 98       	cbi	0x15, 0	; 21
 164:	08 95       	ret
 166:	85 31       	cpi	r24, 0x15	; 21
 168:	91 05       	cpc	r25, r1
 16a:	11 f4       	brne	.+4      	; 0x170 <pinChange+0xb8>
 16c:	a9 98       	cbi	0x15, 1	; 21
 16e:	08 95       	ret
 170:	86 31       	cpi	r24, 0x16	; 22
 172:	91 05       	cpc	r25, r1
 174:	11 f4       	brne	.+4      	; 0x17a <pinChange+0xc2>
 176:	aa 98       	cbi	0x15, 2	; 21
 178:	08 95       	ret
 17a:	87 31       	cpi	r24, 0x17	; 23
 17c:	91 05       	cpc	r25, r1
 17e:	11 f4       	brne	.+4      	; 0x184 <pinChange+0xcc>
 180:	ab 98       	cbi	0x15, 3	; 21
 182:	08 95       	ret
 184:	88 31       	cpi	r24, 0x18	; 24
 186:	91 05       	cpc	r25, r1
 188:	11 f4       	brne	.+4      	; 0x18e <pinChange+0xd6>
 18a:	ac 98       	cbi	0x15, 4	; 21
 18c:	08 95       	ret
 18e:	89 31       	cpi	r24, 0x19	; 25
 190:	91 05       	cpc	r25, r1
 192:	11 f4       	brne	.+4      	; 0x198 <pinChange+0xe0>
 194:	ad 98       	cbi	0x15, 5	; 21
 196:	08 95       	ret
 198:	8a 31       	cpi	r24, 0x1A	; 26
 19a:	91 05       	cpc	r25, r1
 19c:	11 f4       	brne	.+4      	; 0x1a2 <pinChange+0xea>
 19e:	ae 98       	cbi	0x15, 6	; 21
 1a0:	08 95       	ret
 1a2:	8b 31       	cpi	r24, 0x1B	; 27
 1a4:	91 05       	cpc	r25, r1
 1a6:	11 f4       	brne	.+4      	; 0x1ac <pinChange+0xf4>
 1a8:	af 98       	cbi	0x15, 7	; 21
 1aa:	08 95       	ret
 1ac:	8e 31       	cpi	r24, 0x1E	; 30
 1ae:	91 05       	cpc	r25, r1
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <pinChange+0xfe>
 1b2:	90 98       	cbi	0x12, 0	; 18
 1b4:	08 95       	ret
 1b6:	8f 31       	cpi	r24, 0x1F	; 31
 1b8:	91 05       	cpc	r25, r1
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <pinChange+0x108>
 1bc:	91 98       	cbi	0x12, 1	; 18
 1be:	08 95       	ret
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	91 05       	cpc	r25, r1
 1c4:	11 f4       	brne	.+4      	; 0x1ca <pinChange+0x112>
 1c6:	92 98       	cbi	0x12, 2	; 18
 1c8:	08 95       	ret
 1ca:	81 32       	cpi	r24, 0x21	; 33
 1cc:	91 05       	cpc	r25, r1
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <pinChange+0x11c>
 1d0:	93 98       	cbi	0x12, 3	; 18
 1d2:	08 95       	ret
 1d4:	82 32       	cpi	r24, 0x22	; 34
 1d6:	91 05       	cpc	r25, r1
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x126>
 1da:	94 98       	cbi	0x12, 4	; 18
 1dc:	08 95       	ret
 1de:	83 32       	cpi	r24, 0x23	; 35
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x130>
 1e4:	95 98       	cbi	0x12, 5	; 18
 1e6:	08 95       	ret
 1e8:	84 32       	cpi	r24, 0x24	; 36
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x13a>
 1ee:	96 98       	cbi	0x12, 6	; 18
 1f0:	08 95       	ret
 1f2:	85 97       	sbiw	r24, 0x25	; 37
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <pinChange+0x140>
 1f6:	9f c0       	rjmp	.+318    	; 0x336 <pinChange+0x27e>
 1f8:	97 98       	cbi	0x12, 7	; 18
 1fa:	08 95       	ret
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	11 f4       	brne	.+4      	; 0x204 <pinChange+0x14c>
 200:	d8 9a       	sbi	0x1b, 0	; 27
 202:	08 95       	ret
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 05       	cpc	r25, r1
 208:	11 f4       	brne	.+4      	; 0x20e <pinChange+0x156>
 20a:	d9 9a       	sbi	0x1b, 1	; 27
 20c:	08 95       	ret
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	91 05       	cpc	r25, r1
 212:	11 f4       	brne	.+4      	; 0x218 <pinChange+0x160>
 214:	da 9a       	sbi	0x1b, 2	; 27
 216:	08 95       	ret
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	91 05       	cpc	r25, r1
 21c:	11 f4       	brne	.+4      	; 0x222 <pinChange+0x16a>
 21e:	db 9a       	sbi	0x1b, 3	; 27
 220:	08 95       	ret
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	91 05       	cpc	r25, r1
 226:	11 f4       	brne	.+4      	; 0x22c <pinChange+0x174>
 228:	dc 9a       	sbi	0x1b, 4	; 27
 22a:	08 95       	ret
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	91 05       	cpc	r25, r1
 230:	11 f4       	brne	.+4      	; 0x236 <pinChange+0x17e>
 232:	dd 9a       	sbi	0x1b, 5	; 27
 234:	08 95       	ret
 236:	86 30       	cpi	r24, 0x06	; 6
 238:	91 05       	cpc	r25, r1
 23a:	11 f4       	brne	.+4      	; 0x240 <pinChange+0x188>
 23c:	de 9a       	sbi	0x1b, 6	; 27
 23e:	08 95       	ret
 240:	87 30       	cpi	r24, 0x07	; 7
 242:	91 05       	cpc	r25, r1
 244:	11 f4       	brne	.+4      	; 0x24a <pinChange+0x192>
 246:	df 9a       	sbi	0x1b, 7	; 27
 248:	08 95       	ret
 24a:	8a 30       	cpi	r24, 0x0A	; 10
 24c:	91 05       	cpc	r25, r1
 24e:	11 f4       	brne	.+4      	; 0x254 <pinChange+0x19c>
 250:	c0 9a       	sbi	0x18, 0	; 24
 252:	08 95       	ret
 254:	8b 30       	cpi	r24, 0x0B	; 11
 256:	91 05       	cpc	r25, r1
 258:	11 f4       	brne	.+4      	; 0x25e <pinChange+0x1a6>
 25a:	c1 9a       	sbi	0x18, 1	; 24
 25c:	08 95       	ret
 25e:	8c 30       	cpi	r24, 0x0C	; 12
 260:	91 05       	cpc	r25, r1
 262:	11 f4       	brne	.+4      	; 0x268 <pinChange+0x1b0>
 264:	c2 9a       	sbi	0x18, 2	; 24
 266:	08 95       	ret
 268:	8d 30       	cpi	r24, 0x0D	; 13
 26a:	91 05       	cpc	r25, r1
 26c:	11 f4       	brne	.+4      	; 0x272 <pinChange+0x1ba>
 26e:	c3 9a       	sbi	0x18, 3	; 24
 270:	08 95       	ret
 272:	8e 30       	cpi	r24, 0x0E	; 14
 274:	91 05       	cpc	r25, r1
 276:	11 f4       	brne	.+4      	; 0x27c <pinChange+0x1c4>
 278:	c4 9a       	sbi	0x18, 4	; 24
 27a:	08 95       	ret
 27c:	8f 30       	cpi	r24, 0x0F	; 15
 27e:	91 05       	cpc	r25, r1
 280:	11 f4       	brne	.+4      	; 0x286 <pinChange+0x1ce>
 282:	c5 9a       	sbi	0x18, 5	; 24
 284:	08 95       	ret
 286:	80 31       	cpi	r24, 0x10	; 16
 288:	91 05       	cpc	r25, r1
 28a:	11 f4       	brne	.+4      	; 0x290 <pinChange+0x1d8>
 28c:	c6 9a       	sbi	0x18, 6	; 24
 28e:	08 95       	ret
 290:	81 31       	cpi	r24, 0x11	; 17
 292:	91 05       	cpc	r25, r1
 294:	11 f4       	brne	.+4      	; 0x29a <pinChange+0x1e2>
 296:	c7 9a       	sbi	0x18, 7	; 24
 298:	08 95       	ret
 29a:	84 31       	cpi	r24, 0x14	; 20
 29c:	91 05       	cpc	r25, r1
 29e:	11 f4       	brne	.+4      	; 0x2a4 <pinChange+0x1ec>
 2a0:	a8 9a       	sbi	0x15, 0	; 21
 2a2:	08 95       	ret
 2a4:	85 31       	cpi	r24, 0x15	; 21
 2a6:	91 05       	cpc	r25, r1
 2a8:	11 f4       	brne	.+4      	; 0x2ae <pinChange+0x1f6>
 2aa:	a9 9a       	sbi	0x15, 1	; 21
 2ac:	08 95       	ret
 2ae:	86 31       	cpi	r24, 0x16	; 22
 2b0:	91 05       	cpc	r25, r1
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <pinChange+0x200>
 2b4:	aa 9a       	sbi	0x15, 2	; 21
 2b6:	08 95       	ret
 2b8:	87 31       	cpi	r24, 0x17	; 23
 2ba:	91 05       	cpc	r25, r1
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <pinChange+0x20a>
 2be:	ab 9a       	sbi	0x15, 3	; 21
 2c0:	08 95       	ret
 2c2:	88 31       	cpi	r24, 0x18	; 24
 2c4:	91 05       	cpc	r25, r1
 2c6:	11 f4       	brne	.+4      	; 0x2cc <pinChange+0x214>
 2c8:	ac 9a       	sbi	0x15, 4	; 21
 2ca:	08 95       	ret
 2cc:	89 31       	cpi	r24, 0x19	; 25
 2ce:	91 05       	cpc	r25, r1
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <pinChange+0x21e>
 2d2:	ad 9a       	sbi	0x15, 5	; 21
 2d4:	08 95       	ret
 2d6:	8a 31       	cpi	r24, 0x1A	; 26
 2d8:	91 05       	cpc	r25, r1
 2da:	11 f4       	brne	.+4      	; 0x2e0 <pinChange+0x228>
 2dc:	ae 9a       	sbi	0x15, 6	; 21
 2de:	08 95       	ret
 2e0:	8b 31       	cpi	r24, 0x1B	; 27
 2e2:	91 05       	cpc	r25, r1
 2e4:	11 f4       	brne	.+4      	; 0x2ea <pinChange+0x232>
 2e6:	af 9a       	sbi	0x15, 7	; 21
 2e8:	08 95       	ret
 2ea:	8e 31       	cpi	r24, 0x1E	; 30
 2ec:	91 05       	cpc	r25, r1
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <pinChange+0x23c>
 2f0:	90 9a       	sbi	0x12, 0	; 18
 2f2:	08 95       	ret
 2f4:	8f 31       	cpi	r24, 0x1F	; 31
 2f6:	91 05       	cpc	r25, r1
 2f8:	11 f4       	brne	.+4      	; 0x2fe <pinChange+0x246>
 2fa:	91 9a       	sbi	0x12, 1	; 18
 2fc:	08 95       	ret
 2fe:	80 32       	cpi	r24, 0x20	; 32
 300:	91 05       	cpc	r25, r1
 302:	11 f4       	brne	.+4      	; 0x308 <pinChange+0x250>
 304:	92 9a       	sbi	0x12, 2	; 18
 306:	08 95       	ret
 308:	81 32       	cpi	r24, 0x21	; 33
 30a:	91 05       	cpc	r25, r1
 30c:	11 f4       	brne	.+4      	; 0x312 <pinChange+0x25a>
 30e:	93 9a       	sbi	0x12, 3	; 18
 310:	08 95       	ret
 312:	82 32       	cpi	r24, 0x22	; 34
 314:	91 05       	cpc	r25, r1
 316:	11 f4       	brne	.+4      	; 0x31c <pinChange+0x264>
 318:	94 9a       	sbi	0x12, 4	; 18
 31a:	08 95       	ret
 31c:	83 32       	cpi	r24, 0x23	; 35
 31e:	91 05       	cpc	r25, r1
 320:	11 f4       	brne	.+4      	; 0x326 <pinChange+0x26e>
 322:	95 9a       	sbi	0x12, 5	; 18
 324:	08 95       	ret
 326:	84 32       	cpi	r24, 0x24	; 36
 328:	91 05       	cpc	r25, r1
 32a:	11 f4       	brne	.+4      	; 0x330 <pinChange+0x278>
 32c:	96 9a       	sbi	0x12, 6	; 18
 32e:	08 95       	ret
 330:	85 97       	sbiw	r24, 0x25	; 37
 332:	09 f4       	brne	.+2      	; 0x336 <pinChange+0x27e>
 334:	97 9a       	sbi	0x12, 7	; 18
 336:	08 95       	ret

00000338 <Lcd4_Port>:
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
 33c:	80 ff       	sbrs	r24, 0
 33e:	07 c0       	rjmp	.+14     	; 0x34e <Lcd4_Port+0x16>
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 34c:	06 c0       	rjmp	.+12     	; 0x35a <Lcd4_Port+0x22>
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8e e0       	ldi	r24, 0x0E	; 14
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 35a:	c1 ff       	sbrs	r28, 1
 35c:	07 c0       	rjmp	.+14     	; 0x36c <Lcd4_Port+0x34>
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	8f e0       	ldi	r24, 0x0F	; 15
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 36a:	06 c0       	rjmp	.+12     	; 0x378 <Lcd4_Port+0x40>
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 378:	c2 ff       	sbrs	r28, 2
 37a:	07 c0       	rjmp	.+14     	; 0x38a <Lcd4_Port+0x52>
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	80 e1       	ldi	r24, 0x10	; 16
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 388:	06 c0       	rjmp	.+12     	; 0x396 <Lcd4_Port+0x5e>
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 396:	c3 ff       	sbrs	r28, 3
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <Lcd4_Port+0x70>
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	81 e1       	ldi	r24, 0x11	; 17
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <Lcd4_Port+0x7c>
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	81 e1       	ldi	r24, 0x11	; 17
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <Lcd4_Cmd>:
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 3c8:	8c 2f       	mov	r24, r28
 3ca:	0e 94 9c 01 	call	0x338	; 0x338 <Lcd4_Port>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	8b e0       	ldi	r24, 0x0B	; 11
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 3da:	89 ef       	ldi	r24, 0xF9	; 249
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <Lcd4_Cmd+0x26>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Lcd4_Cmd+0x2c>
 3e4:	00 00       	nop
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	8b e0       	ldi	r24, 0x0B	; 11
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 3f2:	89 ef       	ldi	r24, 0xF9	; 249
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <Lcd4_Cmd+0x3e>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <Lcd4_Cmd+0x44>
 3fc:	00 00       	nop
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <Lcd4_Clear>:
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 40e:	08 95       	ret

00000410 <Lcd4_Set_Cursor>:
 410:	cf 93       	push	r28
 412:	c6 2f       	mov	r28, r22
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	59 f4       	brne	.+22     	; 0x42e <Lcd4_Set_Cursor+0x1e>
 418:	80 e8       	ldi	r24, 0x80	; 128
 41a:	86 0f       	add	r24, r22
 41c:	82 95       	swap	r24
 41e:	8f 70       	andi	r24, 0x0F	; 15
 420:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 424:	8c 2f       	mov	r24, r28
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 42c:	0c c0       	rjmp	.+24     	; 0x446 <Lcd4_Set_Cursor+0x36>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	51 f4       	brne	.+20     	; 0x446 <Lcd4_Set_Cursor+0x36>
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	86 0f       	add	r24, r22
 436:	82 95       	swap	r24
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 43e:	8c 2f       	mov	r24, r28
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <Lcd4_Init>:
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 9c 01 	call	0x338	; 0x338 <Lcd4_Port>
 450:	87 e8       	ldi	r24, 0x87	; 135
 452:	93 e1       	ldi	r25, 0x13	; 19
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <Lcd4_Init+0xa>
 458:	00 c0       	rjmp	.+0      	; 0x45a <Lcd4_Init+0x10>
 45a:	00 00       	nop
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 462:	81 ee       	ldi	r24, 0xE1	; 225
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <Lcd4_Init+0x1c>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <Lcd4_Init+0x22>
 46c:	00 00       	nop
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 474:	8d eb       	ldi	r24, 0xBD	; 189
 476:	9a e0       	ldi	r25, 0x0A	; 10
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <Lcd4_Init+0x2e>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <Lcd4_Init+0x34>
 47e:	00 00       	nop
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 492:	88 e0       	ldi	r24, 0x08	; 8
 494:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Lcd4_Cmd>
 4b0:	08 95       	ret

000004b2 <Lcd4_Write_Char>:
 4b2:	cf 93       	push	r28
 4b4:	c8 2f       	mov	r28, r24
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 4c2:	8c 2f       	mov	r24, r28
 4c4:	82 95       	swap	r24
 4c6:	8f 70       	andi	r24, 0x0F	; 15
 4c8:	0e 94 9c 01 	call	0x338	; 0x338 <Lcd4_Port>
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	8b e0       	ldi	r24, 0x0B	; 11
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 4d8:	89 ef       	ldi	r24, 0xF9	; 249
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <Lcd4_Write_Char+0x2a>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <Lcd4_Write_Char+0x30>
 4e2:	00 00       	nop
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	8b e0       	ldi	r24, 0x0B	; 11
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 4f0:	89 ef       	ldi	r24, 0xF9	; 249
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <Lcd4_Write_Char+0x42>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <Lcd4_Write_Char+0x48>
 4fa:	00 00       	nop
 4fc:	8c 2f       	mov	r24, r28
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	0e 94 9c 01 	call	0x338	; 0x338 <Lcd4_Port>
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	8b e0       	ldi	r24, 0x0B	; 11
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 510:	89 ef       	ldi	r24, 0xF9	; 249
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <Lcd4_Write_Char+0x62>
 518:	00 c0       	rjmp	.+0      	; 0x51a <Lcd4_Write_Char+0x68>
 51a:	00 00       	nop
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	8b e0       	ldi	r24, 0x0B	; 11
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 5c 00 	call	0xb8	; 0xb8 <pinChange>
 528:	89 ef       	ldi	r24, 0xF9	; 249
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <Lcd4_Write_Char+0x7a>
 530:	00 c0       	rjmp	.+0      	; 0x532 <Lcd4_Write_Char+0x80>
 532:	00 00       	nop
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <Lcd4_Write_String>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	ec 01       	movw	r28, r24
 53e:	88 81       	ld	r24, Y
 540:	88 23       	and	r24, r24
 542:	31 f0       	breq	.+12     	; 0x550 <Lcd4_Write_String+0x18>
 544:	21 96       	adiw	r28, 0x01	; 1
 546:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Lcd4_Write_Char>
 54a:	89 91       	ld	r24, Y+
 54c:	81 11       	cpse	r24, r1
 54e:	fb cf       	rjmp	.-10     	; 0x546 <Lcd4_Write_String+0xe>
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <modifyBuffer>:




void modifyBuffer(int p, int s)
{
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	int i;
	for (i = 0; i < 5; i++)
	{
		if (p < 0)
 566:	99 23       	and	r25, r25
 568:	0c f4       	brge	.+2      	; 0x56c <modifyBuffer+0x16>
 56a:	59 c0       	rjmp	.+178    	; 0x61e <modifyBuffer+0xc8>
 56c:	ac 01       	movw	r20, r24
 56e:	8c 01       	movw	r16, r24
 570:	01 50       	subi	r16, 0x01	; 1
 572:	11 09       	sbc	r17, r1
 574:	fc 01       	movw	r30, r24
 576:	e6 56       	subi	r30, 0x66	; 102
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	c9 e6       	ldi	r28, 0x69	; 105
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	0f 2e       	mov	r0, r31
 580:	f4 e6       	ldi	r31, 0x64	; 100
 582:	cf 2e       	mov	r12, r31
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	df 2e       	mov	r13, r31
 588:	f0 2d       	mov	r31, r0
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
			}
			else
			{
				if(i == 4 && p == 15)
				{
					buffer[p] &= 0b11111011;
 58e:	0f 2e       	mov	r0, r31
 590:	fa e9       	ldi	r31, 0x9A	; 154
 592:	ef 2e       	mov	r14, r31
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	ff 2e       	mov	r15, r31
 598:	f0 2d       	mov	r31, r0
 59a:	0b c0       	rjmp	.+22     	; 0x5b2 <modifyBuffer+0x5c>
 59c:	41 50       	subi	r20, 0x01	; 1
 59e:	51 09       	sbc	r21, r1
 5a0:	01 50       	subi	r16, 0x01	; 1
 5a2:	11 09       	sbc	r17, r1
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	21 96       	adiw	r28, 0x01	; 1
 5a8:	af ef       	ldi	r26, 0xFF	; 255
 5aa:	ca 1a       	sub	r12, r26
 5ac:	da 0a       	sbc	r13, r26
void modifyBuffer(int p, int s)
{
	int i;
	for (i = 0; i < 5; i++)
	{
		if (p < 0)
 5ae:	33 23       	and	r19, r19
 5b0:	b4 f1       	brlt	.+108    	; 0x61e <modifyBuffer+0xc8>
		{
			break;
		}
		else if (p >= 16)
 5b2:	40 31       	cpi	r20, 0x10	; 16
 5b4:	51 05       	cpc	r21, r1
 5b6:	14 f0       	brlt	.+4      	; 0x5bc <modifyBuffer+0x66>
		{
			p--;
 5b8:	98 01       	movw	r18, r16
			continue;
 5ba:	2c c0       	rjmp	.+88     	; 0x614 <modifyBuffer+0xbe>
		}
		else
		{
			if (s == 0)
 5bc:	61 15       	cp	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	a1 f4       	brne	.+40     	; 0x5ea <modifyBuffer+0x94>
			{
				if(i == 4 && p ==15)
 5c2:	84 30       	cpi	r24, 0x04	; 4
 5c4:	91 05       	cpc	r25, r1
 5c6:	59 f4       	brne	.+22     	; 0x5de <modifyBuffer+0x88>
 5c8:	4f 30       	cpi	r20, 0x0F	; 15
 5ca:	51 05       	cpc	r21, r1
 5cc:	41 f4       	brne	.+16     	; 0x5de <modifyBuffer+0x88>
				{
					buffer[p] &= 0b11011111;
 5ce:	d7 01       	movw	r26, r14
 5d0:	1f 96       	adiw	r26, 0x0f	; 15
 5d2:	2c 91       	ld	r18, X
 5d4:	1f 97       	sbiw	r26, 0x0f	; 15
 5d6:	2f 7d       	andi	r18, 0xDF	; 223
 5d8:	1f 96       	adiw	r26, 0x0f	; 15
 5da:	2c 93       	st	X, r18
 5dc:	1a c0       	rjmp	.+52     	; 0x612 <modifyBuffer+0xbc>
				}
				else{
					buffer[p] = (buffer[p] & (0b00001111));
					buffer[p] |= carPatternLeft[i];
 5de:	20 81       	ld	r18, Z
 5e0:	2f 70       	andi	r18, 0x0F	; 15
 5e2:	38 81       	ld	r19, Y
 5e4:	23 2b       	or	r18, r19
 5e6:	20 83       	st	Z, r18
 5e8:	14 c0       	rjmp	.+40     	; 0x612 <modifyBuffer+0xbc>
				}
			}
			else
			{
				if(i == 4 && p == 15)
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	91 05       	cpc	r25, r1
 5ee:	59 f4       	brne	.+22     	; 0x606 <modifyBuffer+0xb0>
 5f0:	4f 30       	cpi	r20, 0x0F	; 15
 5f2:	51 05       	cpc	r21, r1
 5f4:	41 f4       	brne	.+16     	; 0x606 <modifyBuffer+0xb0>
				{
					buffer[p] &= 0b11111011;
 5f6:	d7 01       	movw	r26, r14
 5f8:	1f 96       	adiw	r26, 0x0f	; 15
 5fa:	2c 91       	ld	r18, X
 5fc:	1f 97       	sbiw	r26, 0x0f	; 15
 5fe:	2b 7f       	andi	r18, 0xFB	; 251
 600:	1f 96       	adiw	r26, 0x0f	; 15
 602:	2c 93       	st	X, r18
 604:	06 c0       	rjmp	.+12     	; 0x612 <modifyBuffer+0xbc>
				}
				else{
						buffer[p] = (buffer[p] & 0b11110000);
						buffer[p] |= carPatternRight[i];
 606:	20 81       	ld	r18, Z
 608:	20 7f       	andi	r18, 0xF0	; 240
 60a:	d6 01       	movw	r26, r12
 60c:	3c 91       	ld	r19, X
 60e:	23 2b       	or	r18, r19
 610:	20 83       	st	Z, r18
				}
			}
			p--;
 612:	98 01       	movw	r18, r16


void modifyBuffer(int p, int s)
{
	int i;
	for (i = 0; i < 5; i++)
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	91 05       	cpc	r25, r1
 61a:	09 f0       	breq	.+2      	; 0x61e <modifyBuffer+0xc8>
 61c:	bf cf       	rjmp	.-130    	; 0x59c <modifyBuffer+0x46>
				}
			}
			p--;
		}
	}
}
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	df 90       	pop	r13
 62c:	cf 90       	pop	r12
 62e:	08 95       	ret

00000630 <modifyBufferFixedCar>:


void modifyBufferFixedCar(int side)
{
 630:	bc 01       	movw	r22, r24
 632:	ae e6       	ldi	r26, 0x6E	; 110
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e6 ea       	ldi	r30, 0xA6	; 166
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	4a ea       	ldi	r20, 0xAA	; 170
 63c:	50 e0       	ldi	r21, 0x00	; 0
	int i;
	char w;
	for (i = 0; i < 4; i++)
	{
		w = car[i];
 63e:	9d 91       	ld	r25, X+
		if (side == 0)
 640:	61 15       	cp	r22, r1
 642:	71 05       	cpc	r23, r1
 644:	29 f4       	brne	.+10     	; 0x650 <modifyBufferFixedCar+0x20>
		{
			w &= 0b11110000;
 646:	90 7f       	andi	r25, 0xF0	; 240
			(buffer[i+12]) &= 0b11110000;
 648:	20 81       	ld	r18, Z
 64a:	20 7f       	andi	r18, 0xF0	; 240
 64c:	20 83       	st	Z, r18
 64e:	04 c0       	rjmp	.+8      	; 0x658 <modifyBufferFixedCar+0x28>
		}
		else
		{
			w &= 0b00001111;
 650:	9f 70       	andi	r25, 0x0F	; 15
			buffer[i+12] &= 0b00001111;
 652:	20 81       	ld	r18, Z
 654:	2f 70       	andi	r18, 0x0F	; 15
 656:	20 83       	st	Z, r18
		}
		buffer[i+12] |= w;
 658:	20 81       	ld	r18, Z
 65a:	92 2b       	or	r25, r18
 65c:	91 93       	st	Z+, r25

void modifyBufferFixedCar(int side)
{
	int i;
	char w;
	for (i = 0; i < 4; i++)
 65e:	e4 17       	cp	r30, r20
 660:	f5 07       	cpc	r31, r21
 662:	69 f7       	brne	.-38     	; 0x63e <modifyBufferFixedCar+0xe>
			w &= 0b00001111;
			buffer[i+12] &= 0b00001111;
		}
		buffer[i+12] |= w;
	}
}
 664:	08 95       	ret

00000666 <drawCar>:

void drawCar()
{
	for(index = 0; index < 16; index++)
 666:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <index+0x1>
 66a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <index>
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTD = (index << 4);
 672:	82 95       	swap	r24
 674:	80 7f       	andi	r24, 0xF0	; 240
 676:	82 bb       	out	0x12, r24	; 18
		if (index <= 7)
 678:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <index>
 67c:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <index+0x1>
 680:	88 30       	cpi	r24, 0x08	; 8
 682:	91 05       	cpc	r25, r1
 684:	3c f4       	brge	.+14     	; 0x694 <drawCar+0x2e>
		{
			PORTC = buffer[index];
 686:	fc 01       	movw	r30, r24
 688:	e6 56       	subi	r30, 0x66	; 102
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	80 81       	ld	r24, Z
 68e:	85 bb       	out	0x15, r24	; 21
			PORTA = 0;
 690:	1b ba       	out	0x1b, r1	; 27
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <drawCar+0x3a>
		}
		else
		{
			PORTA = buffer[index];
 694:	fc 01       	movw	r30, r24
 696:	e6 56       	subi	r30, 0x66	; 102
 698:	ff 4f       	sbci	r31, 0xFF	; 255
 69a:	80 81       	ld	r24, Z
 69c:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0;
 69e:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a0:	89 ef       	ldi	r24, 0xF9	; 249
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <drawCar+0x3e>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <drawCar+0x44>
 6aa:	00 00       	nop
	}
}

void drawCar()
{
	for(index = 0; index < 16; index++)
 6ac:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <index>
 6b0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <index+0x1>
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <index+0x1>
 6ba:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <index>
 6be:	80 31       	cpi	r24, 0x10	; 16
 6c0:	91 05       	cpc	r25, r1
 6c2:	bc f2       	brlt	.-82     	; 0x672 <drawCar+0xc>
			PORTA = buffer[index];
			PORTC = 0;
		}
		_delay_ms(1);
	}
}
 6c4:	08 95       	ret

000006c6 <__vector_1>:
		//_delay_ms(1);
	//}
//}

ISR(INT0_vect)
{
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	4f 93       	push	r20
 6d6:	5f 93       	push	r21
 6d8:	6f 93       	push	r22
 6da:	7f 93       	push	r23
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
 6e4:	ef 93       	push	r30
 6e6:	ff 93       	push	r31
	if (carPosition == 0)
 6e8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 6ec:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 6f0:	89 2b       	or	r24, r25
 6f2:	61 f4       	brne	.+24     	; 0x70c <__vector_1+0x46>
	{
		modifyBufferFixedCar(1);
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 18 03 	call	0x630	; 0x630 <modifyBufferFixedCar>
		carPosition = 1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 704:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
		GIFR = 0xff;
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	8a bf       	out	0x3a, r24	; 58
	}
	
}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <__vector_2>:

ISR(INT1_vect)
{
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
	if (carPosition == 1)
 750:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 754:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	51 f4       	brne	.+20     	; 0x770 <__vector_2+0x42>
	{
		modifyBufferFixedCar(0);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 18 03 	call	0x630	; 0x630 <modifyBufferFixedCar>
		carPosition = 0;
 764:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 768:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
		GIFR = 0xff;
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	8a bf       	out	0x3a, r24	; 58
	}
}
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <crashCarDraw>:


void crashCarDraw()
{
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	0f 2e       	mov	r0, r31
 7a0:	f6 e0       	ldi	r31, 0x06	; 6
 7a2:	ef 2e       	mov	r14, r31
 7a4:	f1 2c       	mov	r15, r1
 7a6:	f0 2d       	mov	r31, r0
 7a8:	0e e9       	ldi	r16, 0x9E	; 158
 7aa:	10 e0       	ldi	r17, 0x00	; 0
	int i, j;
	for (j = 0; j < 6; j++)
	{
		modifyBufferFixedCar(carPosition);
 7ac:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 7b0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 7b4:	0e 94 18 03 	call	0x630	; 0x630 <modifyBufferFixedCar>
 7b8:	ca e0       	ldi	r28, 0x0A	; 10
 7ba:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0; i < 10; i++){
			drawCar();
 7bc:	0e 94 33 03 	call	0x666	; 0x666 <drawCar>
 7c0:	21 97       	sbiw	r28, 0x01	; 1
{
	int i, j;
	for (j = 0; j < 6; j++)
	{
		modifyBufferFixedCar(carPosition);
		for(i = 0; i < 10; i++){
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <crashCarDraw+0x2a>
			drawCar();
		}
		for (i = 0; i < 4; i++)
		{
			if (carPosition == 0)
 7c4:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__data_end>
 7c8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__data_end+0x1>
 7cc:	ea e9       	ldi	r30, 0x9A	; 154
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	ae e6       	ldi	r26, 0x6E	; 110
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	21 15       	cp	r18, r1
 7d6:	31 05       	cpc	r19, r1
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <crashCarDraw+0x56>
			{
				buffer[i+12] &= (~(car[i] & 0b11110000));
 7da:	8c 91       	ld	r24, X
 7dc:	80 7f       	andi	r24, 0xF0	; 240
 7de:	80 95       	com	r24
 7e0:	94 85       	ldd	r25, Z+12	; 0x0c
 7e2:	89 23       	and	r24, r25
 7e4:	84 87       	std	Z+12, r24	; 0x0c
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <crashCarDraw+0x62>
			}
			else
			{
				buffer[i+12] &= (~(car[i] & 0b00001111));
 7e8:	8c 91       	ld	r24, X
 7ea:	8f 70       	andi	r24, 0x0F	; 15
 7ec:	80 95       	com	r24
 7ee:	94 85       	ldd	r25, Z+12	; 0x0c
 7f0:	89 23       	and	r24, r25
 7f2:	84 87       	std	Z+12, r24	; 0x0c
 7f4:	31 96       	adiw	r30, 0x01	; 1
 7f6:	11 96       	adiw	r26, 0x01	; 1
	{
		modifyBufferFixedCar(carPosition);
		for(i = 0; i < 10; i++){
			drawCar();
		}
		for (i = 0; i < 4; i++)
 7f8:	e0 17       	cp	r30, r16
 7fa:	f1 07       	cpc	r31, r17
 7fc:	59 f7       	brne	.-42     	; 0x7d4 <crashCarDraw+0x42>
 7fe:	ca e0       	ldi	r28, 0x0A	; 10
 800:	d0 e0       	ldi	r29, 0x00	; 0
			{
				buffer[i+12] &= (~(car[i] & 0b00001111));
			}
		}
		for(i = 0; i < 10; i++){
			drawCar();
 802:	0e 94 33 03 	call	0x666	; 0x666 <drawCar>
 806:	21 97       	sbiw	r28, 0x01	; 1
			else
			{
				buffer[i+12] &= (~(car[i] & 0b00001111));
			}
		}
		for(i = 0; i < 10; i++){
 808:	e1 f7       	brne	.-8      	; 0x802 <crashCarDraw+0x70>
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	e8 1a       	sub	r14, r24
 80e:	f1 08       	sbc	r15, r1


void crashCarDraw()
{
	int i, j;
	for (j = 0; j < 6; j++)
 810:	69 f6       	brne	.-102    	; 0x7ac <crashCarDraw+0x1a>
		}
		for(i = 0; i < 10; i++){
			drawCar();
		}
	}
}
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	1f 91       	pop	r17
 818:	0f 91       	pop	r16
 81a:	ff 90       	pop	r15
 81c:	ef 90       	pop	r14
 81e:	08 95       	ret

00000820 <game_init>:


void game_init()
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	ea e9       	ldi	r30, 0x9A	; 154
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	8a ea       	ldi	r24, 0xAA	; 170
 82a:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for(i = 0; i < 16; i++)
	{
		buffer[i] = 0;
 82c:	11 92       	st	Z+, r1


void game_init()
{
	int i;
	for(i = 0; i < 16; i++)
 82e:	e8 17       	cp	r30, r24
 830:	f9 07       	cpc	r31, r25
 832:	e1 f7       	brne	.-8      	; 0x82c <game_init+0xc>
	{
		buffer[i] = 0;
	}
	GICR = (1<<INT0)|(1<<INT1);
 834:	80 ec       	ldi	r24, 0xC0	; 192
 836:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC01)|(1<<ISC11);
 838:	8a e0       	ldi	r24, 0x0A	; 10
 83a:	85 bf       	out	0x35, r24	; 53
	sei();
 83c:	78 94       	sei
	position1= 0;
 83e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <position1+0x1>
 842:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <position1>
	carSide1 = 0;
 846:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <carSide1+0x1>
 84a:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <carSide1>
	position2 = -1;
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <position2+0x1>
 856:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <position2>
	carSide2 = 1;
 85a:	c1 e0       	ldi	r28, 0x01	; 1
 85c:	d0 e0       	ldi	r29, 0x00	; 0
 85e:	d0 93 91 00 	sts	0x0091, r29	; 0x800091 <carSide2+0x1>
 862:	c0 93 90 00 	sts	0x0090, r28	; 0x800090 <carSide2>
	position3 = -1;
 866:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <position3+0x1>
 86a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <position3>
	carSide3 = 0;
 86e:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <carSide3+0x1>
 872:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <carSide3>
	carPosition = 0;
 876:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 87a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
	modifyBufferFixedCar(0);
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 18 03 	call	0x630	; 0x630 <modifyBufferFixedCar>
	speed = 20;
 886:	84 e1       	ldi	r24, 0x14	; 20
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <speed+0x1>
 88e:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <speed>
	carCount = 0;
 892:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <carCount+0x1>
 896:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <carCount>
	level = 1;
 89a:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <level+0x1>
 89e:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <level>
	score = 0;
 8a2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <score+0x1>
 8a6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <score>
	
	Lcd4_Init();
 8aa:	0e 94 25 02 	call	0x44a	; 0x44a <Lcd4_Init>
	Lcd4_Clear();
 8ae:	0e 94 01 02 	call	0x402	; 0x402 <Lcd4_Clear>
	Lcd4_Set_Cursor(1, 0);
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Score : ");
 8ba:	82 e7       	ldi	r24, 0x72	; 114
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
	Lcd4_Set_Cursor(1, 8);
 8c2:	68 e0       	ldi	r22, 0x08	; 8
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 8ca:	4a e0       	ldi	r20, 0x0A	; 10
 8cc:	6a e9       	ldi	r22, 0x9A	; 154
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 8d4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 8d8:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
	Lcd4_Write_String(itoa(score, buffer, 10));
 8dc:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
	
	Lcd4_Set_Cursor(2, 0);
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	82 e0       	ldi	r24, 0x02	; 2
 8e4:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
	Lcd4_Write_String("Level : 0");
 8e8:	8b e7       	ldi	r24, 0x7B	; 123
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2, 8);
 8f0:	68 e0       	ldi	r22, 0x08	; 8
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
 8f8:	4a e0       	ldi	r20, 0x0A	; 10
 8fa:	6a e9       	ldi	r22, 0x9A	; 154
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <level>
 902:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <level+0x1>
 906:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
	Lcd4_Write_String(itoa(level, buffer, 10));
 90a:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
}
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <main>:


int main(void)
{
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
 91c:	2a 97       	sbiw	r28, 0x0a	; 10
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	f8 94       	cli
 922:	de bf       	out	0x3e, r29	; 62
 924:	0f be       	out	0x3f, r0	; 63
 926:	cd bf       	out	0x3d, r28	; 61
	int i, j, l = 0;
	char buffer[10];

	srand(time(0));
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 49 00 	call	0x92	; 0x92 <time>
 930:	cb 01       	movw	r24, r22
 932:	0e 94 a7 06 	call	0xd4e	; 0xd4e <srand>
	MCUCSR |= (1 << JTD);
 936:	84 b7       	in	r24, 0x34	; 52
 938:	80 68       	ori	r24, 0x80	; 128
 93a:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);
 93c:	84 b7       	in	r24, 0x34	; 52
 93e:	80 68       	ori	r24, 0x80	; 128
 940:	84 bf       	out	0x34, r24	; 52
    /* Replace with your application code */
	DDRA = 0xff;
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 946:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
 948:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xf0;
 94a:	80 ef       	ldi	r24, 0xF0	; 240
 94c:	81 bb       	out	0x11, r24	; 17
	game_init();
 94e:	0e 94 10 04 	call	0x820	; 0x820 <game_init>
			Lcd4_Set_Cursor(1, 8);
			Lcd4_Write_String(itoa(score, buffer, 10));
		}
		else if (position3 == 20)
		{
			position3 = -1;
 952:	ee 24       	eor	r14, r14
 954:	ea 94       	dec	r14
 956:	fe 2c       	mov	r15, r14
	DDRC = 0xff;
	DDRD = 0xf0;
	game_init();
    while (1) 
    {
		if (position1 >=0 && position1 <= 19)
 958:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <position1>
 95c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <position1+0x1>
 960:	84 31       	cpi	r24, 0x14	; 20
 962:	91 05       	cpc	r25, r1
 964:	78 f4       	brcc	.+30     	; 0x984 <main+0x70>
		{
			modifyBuffer(position1, carSide1);
 966:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <carSide1>
 96a:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <carSide1+0x1>
 96e:	0e 94 ab 02 	call	0x556	; 0x556 <modifyBuffer>
			position1++;
 972:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <position1>
 976:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <position1+0x1>
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <position1+0x1>
 980:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <position1>
		}
		if (position2 >=0 && position2 <= 19)
 984:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <position2>
 988:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <position2+0x1>
 98c:	84 31       	cpi	r24, 0x14	; 20
 98e:	91 05       	cpc	r25, r1
 990:	78 f4       	brcc	.+30     	; 0x9b0 <main+0x9c>
		{
			modifyBuffer(position2, carSide2);
 992:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <carSide2>
 996:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <carSide2+0x1>
 99a:	0e 94 ab 02 	call	0x556	; 0x556 <modifyBuffer>
			position2++;
 99e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <position2>
 9a2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <position2+0x1>
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <position2+0x1>
 9ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <position2>
		}
		if (position3 >=0 && position3 <= 19)
 9b0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <position3>
 9b4:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <position3+0x1>
 9b8:	84 31       	cpi	r24, 0x14	; 20
 9ba:	91 05       	cpc	r25, r1
 9bc:	78 f4       	brcc	.+30     	; 0x9dc <main+0xc8>
		{
			modifyBuffer(position3, carSide3);
 9be:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <carSide3>
 9c2:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <carSide3+0x1>
 9c6:	0e 94 ab 02 	call	0x556	; 0x556 <modifyBuffer>
			position3++;
 9ca:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <position3>
 9ce:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <position3+0x1>
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <position3+0x1>
 9d8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <position3>
		}
		if (position1 == 10)
 9dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <position1>
 9e0:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <position1+0x1>
 9e4:	0a 97       	sbiw	r24, 0x0a	; 10
 9e6:	99 f4       	brne	.+38     	; 0xa0e <main+0xfa>
		{
			position2 = 0;
 9e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <position2+0x1>
 9ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <position2>
			carSide2 = rand() % 2;
 9f0:	0e 94 a2 06 	call	0xd44	; 0xd44 <rand>
 9f4:	81 70       	andi	r24, 0x01	; 1
 9f6:	90 78       	andi	r25, 0x80	; 128
 9f8:	99 23       	and	r25, r25
 9fa:	24 f4       	brge	.+8      	; 0xa04 <main+0xf0>
 9fc:	01 97       	sbiw	r24, 0x01	; 1
 9fe:	8e 6f       	ori	r24, 0xFE	; 254
 a00:	9f 6f       	ori	r25, 0xFF	; 255
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <carSide2+0x1>
 a08:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <carSide2>
 a0c:	31 c0       	rjmp	.+98     	; 0xa70 <main+0x15c>
		}
		else if (position2 == 10)
 a0e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <position2>
 a12:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <position2+0x1>
 a16:	0a 97       	sbiw	r24, 0x0a	; 10
 a18:	99 f4       	brne	.+38     	; 0xa40 <main+0x12c>
		{
			position3 = 0;
 a1a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <position3+0x1>
 a1e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <position3>
			carSide3 = rand() % 2;
 a22:	0e 94 a2 06 	call	0xd44	; 0xd44 <rand>
 a26:	81 70       	andi	r24, 0x01	; 1
 a28:	90 78       	andi	r25, 0x80	; 128
 a2a:	99 23       	and	r25, r25
 a2c:	24 f4       	brge	.+8      	; 0xa36 <main+0x122>
 a2e:	01 97       	sbiw	r24, 0x01	; 1
 a30:	8e 6f       	ori	r24, 0xFE	; 254
 a32:	9f 6f       	ori	r25, 0xFF	; 255
 a34:	01 96       	adiw	r24, 0x01	; 1
 a36:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <carSide3+0x1>
 a3a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <carSide3>
 a3e:	18 c0       	rjmp	.+48     	; 0xa70 <main+0x15c>
		}
		else if (position3 == 10)
 a40:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <position3>
 a44:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <position3+0x1>
 a48:	0a 97       	sbiw	r24, 0x0a	; 10
 a4a:	91 f4       	brne	.+36     	; 0xa70 <main+0x15c>
		{
			position1 = 0;
 a4c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <position1+0x1>
 a50:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <position1>
			carSide1 = rand() % 2;
 a54:	0e 94 a2 06 	call	0xd44	; 0xd44 <rand>
 a58:	81 70       	andi	r24, 0x01	; 1
 a5a:	90 78       	andi	r25, 0x80	; 128
 a5c:	99 23       	and	r25, r25
 a5e:	24 f4       	brge	.+8      	; 0xa68 <main+0x154>
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	8e 6f       	ori	r24, 0xFE	; 254
 a64:	9f 6f       	ori	r25, 0xFF	; 255
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <carSide1+0x1>
 a6c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <carSide1>
		}
		if (position1 == 20)
 a70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <position1>
 a74:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <position1+0x1>
 a78:	44 97       	sbiw	r24, 0x14	; 20
 a7a:	39 f5       	brne	.+78     	; 0xaca <main+0x1b6>
		{
			position1 = -1;
 a7c:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <position1+0x1>
 a80:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <position1>
			carCount++;
 a84:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <carCount>
 a88:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <carCount+0x1>
 a8c:	01 96       	adiw	r24, 0x01	; 1
 a8e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <carCount+0x1>
 a92:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <carCount>
			score++;
 a96:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 a9a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <score+0x1>
 aa4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <score>
			Lcd4_Set_Cursor(1, 8);
 aa8:	68 e0       	ldi	r22, 0x08	; 8
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
 ab0:	4a e0       	ldi	r20, 0x0A	; 10
 ab2:	be 01       	movw	r22, r28
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 abc:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 ac0:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
			Lcd4_Write_String(itoa(score, buffer, 10));
 ac4:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
 ac8:	59 c0       	rjmp	.+178    	; 0xb7c <main+0x268>
		}
		else if (position2 == 20)
 aca:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <position2>
 ace:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <position2+0x1>
 ad2:	44 97       	sbiw	r24, 0x14	; 20
 ad4:	39 f5       	brne	.+78     	; 0xb24 <main+0x210>
		{
			position2 = -1;
 ad6:	f0 92 8b 00 	sts	0x008B, r15	; 0x80008b <position2+0x1>
 ada:	e0 92 8a 00 	sts	0x008A, r14	; 0x80008a <position2>
			carCount++;
 ade:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <carCount>
 ae2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <carCount+0x1>
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <carCount+0x1>
 aec:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <carCount>
			score++;
 af0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 af4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 af8:	01 96       	adiw	r24, 0x01	; 1
 afa:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <score+0x1>
 afe:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <score>
			Lcd4_Set_Cursor(1, 8);
 b02:	68 e0       	ldi	r22, 0x08	; 8
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
 b0a:	4a e0       	ldi	r20, 0x0A	; 10
 b0c:	be 01       	movw	r22, r28
 b0e:	6f 5f       	subi	r22, 0xFF	; 255
 b10:	7f 4f       	sbci	r23, 0xFF	; 255
 b12:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 b16:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 b1a:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
			Lcd4_Write_String(itoa(score, buffer, 10));
 b1e:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
 b22:	2c c0       	rjmp	.+88     	; 0xb7c <main+0x268>
		}
		else if (position3 == 20)
 b24:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <position3>
 b28:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <position3+0x1>
 b2c:	44 97       	sbiw	r24, 0x14	; 20
 b2e:	31 f5       	brne	.+76     	; 0xb7c <main+0x268>
		{
			position3 = -1;
 b30:	f0 92 93 00 	sts	0x0093, r15	; 0x800093 <position3+0x1>
 b34:	e0 92 92 00 	sts	0x0092, r14	; 0x800092 <position3>
			carCount++;
 b38:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <carCount>
 b3c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <carCount+0x1>
 b40:	01 96       	adiw	r24, 0x01	; 1
 b42:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <carCount+0x1>
 b46:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <carCount>
			score++;
 b4a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 b4e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 b52:	01 96       	adiw	r24, 0x01	; 1
 b54:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <score+0x1>
 b58:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <score>
			Lcd4_Set_Cursor(1, 8);
 b5c:	68 e0       	ldi	r22, 0x08	; 8
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
 b64:	4a e0       	ldi	r20, 0x0A	; 10
 b66:	be 01       	movw	r22, r28
 b68:	6f 5f       	subi	r22, 0xFF	; 255
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <score>
 b70:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <score+0x1>
 b74:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
			Lcd4_Write_String(itoa(score, buffer, 10));
 b78:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
		}
		if (carCount == 3)
 b7c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <carCount>
 b80:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <carCount+0x1>
 b84:	03 97       	sbiw	r24, 0x03	; 3
 b86:	c1 f5       	brne	.+112    	; 0xbf8 <main+0x2e4>
		{
			carCount = 0;
 b88:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <carCount+0x1>
 b8c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <carCount>
			if (level <= 15)
 b90:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <level>
 b94:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <level+0x1>
 b98:	80 31       	cpi	r24, 0x10	; 16
 b9a:	91 05       	cpc	r25, r1
 b9c:	2c f4       	brge	.+10     	; 0xba8 <main+0x294>
			{
				level++;
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <level+0x1>
 ba4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <level>
			}
			
		
			Lcd4_Set_Cursor(2, 8);
 ba8:	68 e0       	ldi	r22, 0x08	; 8
 baa:	82 e0       	ldi	r24, 0x02	; 2
 bac:	0e 94 08 02 	call	0x410	; 0x410 <Lcd4_Set_Cursor>
 bb0:	4a e0       	ldi	r20, 0x0A	; 10
 bb2:	be 01       	movw	r22, r28
 bb4:	6f 5f       	subi	r22, 0xFF	; 255
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <level>
 bbc:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <level+0x1>
 bc0:	0e 94 b2 06 	call	0xd64	; 0xd64 <__itoa_ncheck>
			Lcd4_Write_String(itoa(level, buffer, 10));
 bc4:	0e 94 9c 02 	call	0x538	; 0x538 <Lcd4_Write_String>
			if (speed > 10)
 bc8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <speed>
 bcc:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <speed+0x1>
 bd0:	8b 30       	cpi	r24, 0x0B	; 11
 bd2:	91 05       	cpc	r25, r1
 bd4:	34 f0       	brlt	.+12     	; 0xbe2 <main+0x2ce>
			{
				speed -= 10;
 bd6:	0a 97       	sbiw	r24, 0x0a	; 10
 bd8:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <speed+0x1>
 bdc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <speed>
 be0:	0b c0       	rjmp	.+22     	; 0xbf8 <main+0x2e4>
			}
			else if (speed > 2 && speed <= 10)
 be2:	9c 01       	movw	r18, r24
 be4:	23 50       	subi	r18, 0x03	; 3
 be6:	31 09       	sbc	r19, r1
 be8:	28 30       	cpi	r18, 0x08	; 8
 bea:	31 05       	cpc	r19, r1
 bec:	28 f4       	brcc	.+10     	; 0xbf8 <main+0x2e4>
			{
				speed--;
 bee:	01 97       	sbiw	r24, 0x01	; 1
 bf0:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <speed+0x1>
 bf4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <speed>
			}
		}
		
		if (position1 > 12 && carSide1 == carPosition)
 bf8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <position1>
 bfc:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <position1+0x1>
 c00:	0d 97       	sbiw	r24, 0x0d	; 13
 c02:	c4 f0       	brlt	.+48     	; 0xc34 <main+0x320>
 c04:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <carSide1>
 c08:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <carSide1+0x1>
 c0c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 c10:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 c14:	28 17       	cp	r18, r24
 c16:	39 07       	cpc	r19, r25
 c18:	69 f4       	brne	.+26     	; 0xc34 <main+0x320>
		{
			cli();
 c1a:	f8 94       	cli
			crashCarDraw();
 c1c:	0e 94 c9 03 	call	0x792	; 0x792 <crashCarDraw>
			game_init();
 c20:	0e 94 10 04 	call	0x820	; 0x820 <game_init>
			cli();
			crashCarDraw();
			game_init();
		}
		
		for(i = 0; i < speed; i++)
 c24:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <speed>
 c28:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <speed+0x1>
 c2c:	18 16       	cp	r1, r24
 c2e:	19 06       	cpc	r1, r25
 c30:	7c f1       	brlt	.+94     	; 0xc90 <main+0x37c>
 c32:	92 ce       	rjmp	.-732    	; 0x958 <main+0x44>
		{
			cli();
			crashCarDraw();
			game_init();
		}
		else if (position2 > 12 && carSide2 == carPosition)
 c34:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <position2>
 c38:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <position2+0x1>
 c3c:	0d 97       	sbiw	r24, 0x0d	; 13
 c3e:	8c f0       	brlt	.+34     	; 0xc62 <main+0x34e>
 c40:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <carSide2>
 c44:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <carSide2+0x1>
 c48:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 c4c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 c50:	28 17       	cp	r18, r24
 c52:	39 07       	cpc	r19, r25
 c54:	31 f4       	brne	.+12     	; 0xc62 <main+0x34e>
		{
			cli();
 c56:	f8 94       	cli
			crashCarDraw();
 c58:	0e 94 c9 03 	call	0x792	; 0x792 <crashCarDraw>
			game_init();
 c5c:	0e 94 10 04 	call	0x820	; 0x820 <game_init>
 c60:	e1 cf       	rjmp	.-62     	; 0xc24 <main+0x310>
		}
		else if (position3 > 12 && carSide3 == carPosition)
 c62:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <position3>
 c66:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <position3+0x1>
 c6a:	0d 97       	sbiw	r24, 0x0d	; 13
 c6c:	dc f2       	brlt	.-74     	; 0xc24 <main+0x310>
 c6e:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <carSide3>
 c72:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <carSide3+0x1>
 c76:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 c7a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 c7e:	28 17       	cp	r18, r24
 c80:	39 07       	cpc	r19, r25
 c82:	81 f6       	brne	.-96     	; 0xc24 <main+0x310>
		{
			cli();
 c84:	f8 94       	cli
			crashCarDraw();
 c86:	0e 94 c9 03 	call	0x792	; 0x792 <crashCarDraw>
			game_init();
 c8a:	0e 94 10 04 	call	0x820	; 0x820 <game_init>
 c8e:	ca cf       	rjmp	.-108    	; 0xc24 <main+0x310>
		}
		
		for(i = 0; i < speed; i++)
 c90:	00 e0       	ldi	r16, 0x00	; 0
 c92:	10 e0       	ldi	r17, 0x00	; 0
		{
			drawCar();
 c94:	0e 94 33 03 	call	0x666	; 0x666 <drawCar>
			cli();
			crashCarDraw();
			game_init();
		}
		
		for(i = 0; i < speed; i++)
 c98:	0f 5f       	subi	r16, 0xFF	; 255
 c9a:	1f 4f       	sbci	r17, 0xFF	; 255
 c9c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <speed>
 ca0:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <speed+0x1>
 ca4:	08 17       	cp	r16, r24
 ca6:	19 07       	cpc	r17, r25
 ca8:	ac f3       	brlt	.-22     	; 0xc94 <main+0x380>
 caa:	56 ce       	rjmp	.-852    	; 0x958 <main+0x44>

00000cac <do_rand>:
 cac:	8f 92       	push	r8
 cae:	9f 92       	push	r9
 cb0:	af 92       	push	r10
 cb2:	bf 92       	push	r11
 cb4:	cf 92       	push	r12
 cb6:	df 92       	push	r13
 cb8:	ef 92       	push	r14
 cba:	ff 92       	push	r15
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	ec 01       	movw	r28, r24
 cc2:	68 81       	ld	r22, Y
 cc4:	79 81       	ldd	r23, Y+1	; 0x01
 cc6:	8a 81       	ldd	r24, Y+2	; 0x02
 cc8:	9b 81       	ldd	r25, Y+3	; 0x03
 cca:	61 15       	cp	r22, r1
 ccc:	71 05       	cpc	r23, r1
 cce:	81 05       	cpc	r24, r1
 cd0:	91 05       	cpc	r25, r1
 cd2:	21 f4       	brne	.+8      	; 0xcdc <do_rand+0x30>
 cd4:	64 e2       	ldi	r22, 0x24	; 36
 cd6:	79 ed       	ldi	r23, 0xD9	; 217
 cd8:	8b e5       	ldi	r24, 0x5B	; 91
 cda:	97 e0       	ldi	r25, 0x07	; 7
 cdc:	2d e1       	ldi	r18, 0x1D	; 29
 cde:	33 ef       	ldi	r19, 0xF3	; 243
 ce0:	41 e0       	ldi	r20, 0x01	; 1
 ce2:	50 e0       	ldi	r21, 0x00	; 0
 ce4:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodsi4>
 ce8:	49 01       	movw	r8, r18
 cea:	5a 01       	movw	r10, r20
 cec:	9b 01       	movw	r18, r22
 cee:	ac 01       	movw	r20, r24
 cf0:	a7 ea       	ldi	r26, 0xA7	; 167
 cf2:	b1 e4       	ldi	r27, 0x41	; 65
 cf4:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 cf8:	6b 01       	movw	r12, r22
 cfa:	7c 01       	movw	r14, r24
 cfc:	ac ee       	ldi	r26, 0xEC	; 236
 cfe:	b4 ef       	ldi	r27, 0xF4	; 244
 d00:	a5 01       	movw	r20, r10
 d02:	94 01       	movw	r18, r8
 d04:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulohisi3>
 d08:	dc 01       	movw	r26, r24
 d0a:	cb 01       	movw	r24, r22
 d0c:	8c 0d       	add	r24, r12
 d0e:	9d 1d       	adc	r25, r13
 d10:	ae 1d       	adc	r26, r14
 d12:	bf 1d       	adc	r27, r15
 d14:	b7 ff       	sbrs	r27, 7
 d16:	03 c0       	rjmp	.+6      	; 0xd1e <do_rand+0x72>
 d18:	01 97       	sbiw	r24, 0x01	; 1
 d1a:	a1 09       	sbc	r26, r1
 d1c:	b0 48       	sbci	r27, 0x80	; 128
 d1e:	88 83       	st	Y, r24
 d20:	99 83       	std	Y+1, r25	; 0x01
 d22:	aa 83       	std	Y+2, r26	; 0x02
 d24:	bb 83       	std	Y+3, r27	; 0x03
 d26:	9f 77       	andi	r25, 0x7F	; 127
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
 d2c:	ff 90       	pop	r15
 d2e:	ef 90       	pop	r14
 d30:	df 90       	pop	r13
 d32:	cf 90       	pop	r12
 d34:	bf 90       	pop	r11
 d36:	af 90       	pop	r10
 d38:	9f 90       	pop	r9
 d3a:	8f 90       	pop	r8
 d3c:	08 95       	ret

00000d3e <rand_r>:
 d3e:	0e 94 56 06 	call	0xcac	; 0xcac <do_rand>
 d42:	08 95       	ret

00000d44 <rand>:
 d44:	80 e6       	ldi	r24, 0x60	; 96
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	0e 94 56 06 	call	0xcac	; 0xcac <do_rand>
 d4c:	08 95       	ret

00000d4e <srand>:
 d4e:	a0 e0       	ldi	r26, 0x00	; 0
 d50:	b0 e0       	ldi	r27, 0x00	; 0
 d52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 d56:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 d5a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 d5e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 d62:	08 95       	ret

00000d64 <__itoa_ncheck>:
 d64:	bb 27       	eor	r27, r27
 d66:	4a 30       	cpi	r20, 0x0A	; 10
 d68:	31 f4       	brne	.+12     	; 0xd76 <__itoa_ncheck+0x12>
 d6a:	99 23       	and	r25, r25
 d6c:	22 f4       	brpl	.+8      	; 0xd76 <__itoa_ncheck+0x12>
 d6e:	bd e2       	ldi	r27, 0x2D	; 45
 d70:	90 95       	com	r25
 d72:	81 95       	neg	r24
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__utoa_common>

00000d7a <__utoa_ncheck>:
 d7a:	bb 27       	eor	r27, r27

00000d7c <__utoa_common>:
 d7c:	fb 01       	movw	r30, r22
 d7e:	55 27       	eor	r21, r21
 d80:	aa 27       	eor	r26, r26
 d82:	88 0f       	add	r24, r24
 d84:	99 1f       	adc	r25, r25
 d86:	aa 1f       	adc	r26, r26
 d88:	a4 17       	cp	r26, r20
 d8a:	10 f0       	brcs	.+4      	; 0xd90 <__utoa_common+0x14>
 d8c:	a4 1b       	sub	r26, r20
 d8e:	83 95       	inc	r24
 d90:	50 51       	subi	r21, 0x10	; 16
 d92:	b9 f7       	brne	.-18     	; 0xd82 <__utoa_common+0x6>
 d94:	a0 5d       	subi	r26, 0xD0	; 208
 d96:	aa 33       	cpi	r26, 0x3A	; 58
 d98:	08 f0       	brcs	.+2      	; 0xd9c <__utoa_common+0x20>
 d9a:	a9 5d       	subi	r26, 0xD9	; 217
 d9c:	a1 93       	st	Z+, r26
 d9e:	00 97       	sbiw	r24, 0x00	; 0
 da0:	79 f7       	brne	.-34     	; 0xd80 <__utoa_common+0x4>
 da2:	b1 11       	cpse	r27, r1
 da4:	b1 93       	st	Z+, r27
 da6:	11 92       	st	Z+, r1
 da8:	cb 01       	movw	r24, r22
 daa:	0c 94 d7 06 	jmp	0xdae	; 0xdae <strrev>

00000dae <strrev>:
 dae:	dc 01       	movw	r26, r24
 db0:	fc 01       	movw	r30, r24
 db2:	67 2f       	mov	r22, r23
 db4:	71 91       	ld	r23, Z+
 db6:	77 23       	and	r23, r23
 db8:	e1 f7       	brne	.-8      	; 0xdb2 <strrev+0x4>
 dba:	32 97       	sbiw	r30, 0x02	; 2
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <strrev+0x18>
 dbe:	7c 91       	ld	r23, X
 dc0:	6d 93       	st	X+, r22
 dc2:	70 83       	st	Z, r23
 dc4:	62 91       	ld	r22, -Z
 dc6:	ae 17       	cp	r26, r30
 dc8:	bf 07       	cpc	r27, r31
 dca:	c8 f3       	brcs	.-14     	; 0xdbe <strrev+0x10>
 dcc:	08 95       	ret

00000dce <__divmodsi4>:
 dce:	05 2e       	mov	r0, r21
 dd0:	97 fb       	bst	r25, 7
 dd2:	1e f4       	brtc	.+6      	; 0xdda <__divmodsi4+0xc>
 dd4:	00 94       	com	r0
 dd6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__negsi2>
 dda:	57 fd       	sbrc	r21, 7
 ddc:	07 d0       	rcall	.+14     	; 0xdec <__divmodsi4_neg2>
 dde:	0e 94 19 07 	call	0xe32	; 0xe32 <__udivmodsi4>
 de2:	07 fc       	sbrc	r0, 7
 de4:	03 d0       	rcall	.+6      	; 0xdec <__divmodsi4_neg2>
 de6:	4e f4       	brtc	.+18     	; 0xdfa <__divmodsi4_exit>
 de8:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__negsi2>

00000dec <__divmodsi4_neg2>:
 dec:	50 95       	com	r21
 dee:	40 95       	com	r20
 df0:	30 95       	com	r19
 df2:	21 95       	neg	r18
 df4:	3f 4f       	sbci	r19, 0xFF	; 255
 df6:	4f 4f       	sbci	r20, 0xFF	; 255
 df8:	5f 4f       	sbci	r21, 0xFF	; 255

00000dfa <__divmodsi4_exit>:
 dfa:	08 95       	ret

00000dfc <__negsi2>:
 dfc:	90 95       	com	r25
 dfe:	80 95       	com	r24
 e00:	70 95       	com	r23
 e02:	61 95       	neg	r22
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	08 95       	ret

00000e0c <__muluhisi3>:
 e0c:	0e 94 3b 07 	call	0xe76	; 0xe76 <__umulhisi3>
 e10:	a5 9f       	mul	r26, r21
 e12:	90 0d       	add	r25, r0
 e14:	b4 9f       	mul	r27, r20
 e16:	90 0d       	add	r25, r0
 e18:	a4 9f       	mul	r26, r20
 e1a:	80 0d       	add	r24, r0
 e1c:	91 1d       	adc	r25, r1
 e1e:	11 24       	eor	r1, r1
 e20:	08 95       	ret

00000e22 <__mulshisi3>:
 e22:	b7 ff       	sbrs	r27, 7
 e24:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__muluhisi3>

00000e28 <__mulohisi3>:
 e28:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 e2c:	82 1b       	sub	r24, r18
 e2e:	93 0b       	sbc	r25, r19
 e30:	08 95       	ret

00000e32 <__udivmodsi4>:
 e32:	a1 e2       	ldi	r26, 0x21	; 33
 e34:	1a 2e       	mov	r1, r26
 e36:	aa 1b       	sub	r26, r26
 e38:	bb 1b       	sub	r27, r27
 e3a:	fd 01       	movw	r30, r26
 e3c:	0d c0       	rjmp	.+26     	; 0xe58 <__udivmodsi4_ep>

00000e3e <__udivmodsi4_loop>:
 e3e:	aa 1f       	adc	r26, r26
 e40:	bb 1f       	adc	r27, r27
 e42:	ee 1f       	adc	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	a2 17       	cp	r26, r18
 e48:	b3 07       	cpc	r27, r19
 e4a:	e4 07       	cpc	r30, r20
 e4c:	f5 07       	cpc	r31, r21
 e4e:	20 f0       	brcs	.+8      	; 0xe58 <__udivmodsi4_ep>
 e50:	a2 1b       	sub	r26, r18
 e52:	b3 0b       	sbc	r27, r19
 e54:	e4 0b       	sbc	r30, r20
 e56:	f5 0b       	sbc	r31, r21

00000e58 <__udivmodsi4_ep>:
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	88 1f       	adc	r24, r24
 e5e:	99 1f       	adc	r25, r25
 e60:	1a 94       	dec	r1
 e62:	69 f7       	brne	.-38     	; 0xe3e <__udivmodsi4_loop>
 e64:	60 95       	com	r22
 e66:	70 95       	com	r23
 e68:	80 95       	com	r24
 e6a:	90 95       	com	r25
 e6c:	9b 01       	movw	r18, r22
 e6e:	ac 01       	movw	r20, r24
 e70:	bd 01       	movw	r22, r26
 e72:	cf 01       	movw	r24, r30
 e74:	08 95       	ret

00000e76 <__umulhisi3>:
 e76:	a2 9f       	mul	r26, r18
 e78:	b0 01       	movw	r22, r0
 e7a:	b3 9f       	mul	r27, r19
 e7c:	c0 01       	movw	r24, r0
 e7e:	a3 9f       	mul	r26, r19
 e80:	70 0d       	add	r23, r0
 e82:	81 1d       	adc	r24, r1
 e84:	11 24       	eor	r1, r1
 e86:	91 1d       	adc	r25, r1
 e88:	b2 9f       	mul	r27, r18
 e8a:	70 0d       	add	r23, r0
 e8c:	81 1d       	adc	r24, r1
 e8e:	11 24       	eor	r1, r1
 e90:	91 1d       	adc	r25, r1
 e92:	08 95       	ret

00000e94 <_exit>:
 e94:	f8 94       	cli

00000e96 <__stop_program>:
 e96:	ff cf       	rjmp	.-2      	; 0xe96 <__stop_program>
